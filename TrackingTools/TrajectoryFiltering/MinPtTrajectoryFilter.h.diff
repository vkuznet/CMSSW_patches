--- ./CMSSW_CVS/TrackingTools/TrajectoryFiltering/interface/MinPtTrajectoryFilter.h	2012-08-22 02:22:49.000000000 -0400
+++ MinPtTrajectoryFilter.h	2013-03-14 13:32:54.000000000 -0400
@@ -44,25 +44,19 @@
     // check for momentum below limit
     const FreeTrajectoryState& fts = *tm.updatedState().freeTrajectoryState();
 
-    //avoid doing twice the check in TBC and QF
-    static bool answerMemory=false;
-    static FreeTrajectoryState ftsMemory;
-    if (ftsMemory.parameters().vector() == fts.parameters().vector()) { return answerMemory;}
-    ftsMemory=fts;
-
     //if p_T is way too small: stop
     float pT2 = fts.momentum().perp2();
-    if (pT2<(0.010*0.010)) {answerMemory=false; return false;}
+    if (pT2<(0.010*0.010)) {return false;}
     //if error is way too big: stop
     float invError = TrajectoryStateAccessor(fts).inversePtError();
-    if (invError > 1.e10f) {answerMemory=false;return false;}
+    if (invError > 1.e10f) {return false;}
 
     //calculate the actual pT cut: 
-    if ( (1.f/sqrt(pT2) - theNSigma*invError) > theInvPtMin) {answerMemory=false; return false;}
+    if ( (1.f/sqrt(pT2) - theNSigma*invError) > theInvPtMin) {return false;}
     //    first term if the max value of pT (pT+N*sigma(pT))
     //    second tern is the cut
 
-    answerMemory=true; return true;
+    return true;
   }
 
   float theInvPtMin;

--- ./CMSSW_CVS/TrackingTools/TrajectoryFiltering/interface/ThresholdPtTrajectoryFilter.h	2008-06-10 07:09:20.000000000 -0400
+++ ThresholdPtTrajectoryFilter.h	2013-03-14 13:43:34.000000000 -0400
@@ -44,25 +44,19 @@
     // check for momentum below limit
     const FreeTrajectoryState& fts = *tm.updatedState().freeTrajectoryState();
 
-    //avoid doing twice the check in TBC and QF
-    static bool answerMemory=false;
-    static FreeTrajectoryState ftsMemory;
-    if (ftsMemory.parameters().vector() == fts.parameters().vector()) { return answerMemory;}
-    ftsMemory=fts;
-
     //if p_T is way too small: stop
     double pT = fts.momentum().perp();
-    if (pT<0.010) {answerMemory=false; return false;}
+    if (pT<0.010) {return false;}
     //if error is way too big: stop
     double invError = TrajectoryStateAccessor(fts).inversePtError();
-    if (invError > 1.e10) {answerMemory=false;return false;}
+    if (invError > 1.e10) {return false;}
 
     //calculate the actual pT cut: 
-    if ((1/pT + theNSigma*invError ) < 1/thePtThreshold ) {answerMemory=false; return false;}
+    if ((1/pT + theNSigma*invError ) < 1/thePtThreshold ) {return false;}
     //    first term is the minimal value of pT (pT-N*sigma(pT))
     //    secon term is the cut
 
-    answerMemory=true; return true;
+    return true;
   }
 
   double thePtThreshold;
